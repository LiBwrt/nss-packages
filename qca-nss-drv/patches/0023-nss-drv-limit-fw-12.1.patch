--- a/exports/nss_capwap.h
+++ b/exports/nss_capwap.h
@@ -285,16 +285,6 @@ struct nss_capwap_dtls_msg {
 };
 
 /**
- * nss_capwap_flow_attr
- *	Inner Flow attributes.
- */
-struct nss_capwap_flow_attr {
-	uint8_t type;			/**< Type to indicate if SCS is valid or SAWF is valid. */
-	uint32_t flow_id;		/**< Flow Identification. */
-	uint32_t scs_sdwf_id;		/**< SCS or SDWF Identification. */
-};
-
-/**
  * nss_capwap_flow_rule_msg
  *	CAPWAP flow rule message structure.
  */
@@ -312,7 +302,7 @@ struct nss_capwap_flow_rule_msg {
 	/*
 	 * Flow attributes.
 	 */
-	struct nss_capwap_flow_attr flow_attr;
+	uint32_t flow_id;		/**< Flow identification. */
 };
 
 /**
--- a/exports/nss_ipv4.h
+++ b/exports/nss_ipv4.h
@@ -290,7 +290,6 @@ enum nss_ipv4_stats_types {
 #define NSS_IPV4_RULE_CREATE_IDENTIFIER_VALID 0x1000
 		/**< Identifier is valid. */
 #define NSS_IPV4_RULE_CREATE_MIRROR_VALID 0x2000	/**< Mirror fields are valid. */
-#define NSS_IPV4_RULE_CREATE_RAWIP_VALID 0x4000		/**< RAW IP fields are valid. */
 
 /*
  * Multicast command rule flags
--- a/exports/nss_pvxlan.h
+++ b/exports/nss_pvxlan.h
@@ -63,8 +60,6 @@ typedef enum nss_pvxlan_msg_type {
 	NSS_PVXLAN_MSG_TYPE_TUNNEL_DISABLE,	/**< Disable the tunnel. */
 	NSS_PVXLAN_MSG_TYPE_MAC_ADD,		/**< Add MAC rule to the database. */
 	NSS_PVXLAN_MSG_TYPE_MAC_DEL,		/**< Remove MAC rule from the database. */
-	NSS_PVXLAN_MSG_TYPE_CONFIG_VP,		/**< VP configuration. */
-	NSS_PVXLAN_MSG_TYPE_UNCONFIG_VP,	/**< VP unconfiguration. */
 	NSS_PVXLAN_MSG_TYPE_MAX,		/**< Maximum message type. */
 } nss_pvxlan_msg_type_t;
 
@@ -97,10 +92,6 @@ typedef enum nss_pvxlan_error_response_t
 						/**< MAC entry allocation failed. */
 	PVXLAN_ERROR_MSG_MAC_ENTRY_DELETE_FAILED,
 						/**< MAC entry deletion failed. */
-	PVXLAN_ERROR_MSG_CONFIG_VP_FAILED,
-						/**< VP configuration failed. */
-	PVXLAN_ERROR_MSG_UNCONFIG_VP_FAILED,
-						/**< VP unconfiguration failed. */
 	NSS_PVXLAN_ERROR_MAX,			/**< Maximum error type. */
 } nss_pvxlan_error_response_t;
 
@@ -182,18 +173,6 @@ struct nss_pvxlan_mac_msg {
 };
 
 /**
- * nss_pvxlan_vp_msg
- *	VP configuration message.
- *
- * This updates the VP number and "PPE to host" mode associated with
- * the PVxLAN tunnel.
- */
-struct nss_pvxlan_vp_msg {
-	int16_t vp_num;		/**< VP number. */
-	bool ppe_to_host;	/**< Enable/disable PPE to host mode. */
-};
-
-/**
  * nss_pvxlan_msg
  *	Data for sending and receiving proxy VxLAN messages.
  */
@@ -216,8 +195,6 @@ struct nss_pvxlan_msg {
 				/**< MAC rule add message. */
 		struct nss_pvxlan_mac_msg mac_del;
 				/**< MAC rule delete message. */
-		struct nss_pvxlan_vp_msg vp_config;
-				/**< VP configuration message. */
 	} msg;			/**< Message payload. */
 };
 
--- a/exports/nss_wifili_if.h
+++ b/exports/nss_wifili_if.h
@@ -1444,8 +1444,6 @@ struct nss_wifili_rx_ctrl_stats {
 	uint32_t bcast_rcv_bytes;		/**< Total number of broadcast bytes received. */
 	uint32_t defrag_mcast_drop;		/**< Total number of defrag multicast dropped packets. */
 	uint32_t mcast_3addr_drop;		/**< Total number of 3 address multicast dropped packets. */
-	uint32_t ucast_rcv_cnt;			/**< Total number of unicast packets received. */
-	uint32_t ucast_rcv_bytes;		/**< Total number of unicast bytes received. */
 };
 
 /**
@@ -1457,8 +1455,6 @@ struct nss_wifili_retry_ctrl_stats {
 	uint32_t tx_retry_count;		/**< Transmit retry count. */
 	uint32_t tx_multiple_retry_count;	/**< Transmit multiple retry count. */
 	uint32_t rx_retry_count;		/**< Receive retry count. */
-	uint32_t tx_mpdu_retry_count;		/**< Per mpdu retry count. */
-	uint32_t tx_mpdu_total_retry_count;	/**< Total mpdu retry count. */
 };
 
 /**
